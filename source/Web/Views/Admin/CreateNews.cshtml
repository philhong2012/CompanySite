@model CompanySite.Models.NewsModel
@{
    ViewBag.Title = "CreateNews";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<script src="@Url.Content("~/Content/ckeditor/ckeditor.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/ckfinder/ckfinder.js")" type="text/javascript"></script>
<h2>AddNews</h2>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>News</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.News.NewsClass)
            
        </div>
         <div class="editor-field">
            @Html.DropDownListFor(model => model.News.ClassId, Model.NewsClassList, "-请选择-", new { @id="ClassId", @name="ClassId"})
            @Html.ValidationMessageFor(model => model.News.ClassId)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.News.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.News.Title)
            @Html.ValidationMessageFor(model => model.News.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.News.Content)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.News.Content, new { @rows=10, @cols=10,@id="ckeditor1", @class="ckeditor"})
            @Html.ValidationMessageFor(model => model.News.Content)
          </div>

        <div class="editor-label">
            @Html.CheckBoxFor(model => model.News.IsTop, new { @id = "chkIsTop" })
            @Html.ValidationMessageFor(model => model.News.IsTop) @Html.LabelFor(model => model.News.IsTop, new { @for = "chkIsTop" })
  
           @Html.CheckBoxFor(model => model.News.IsElite, new { @id = "chkIsElite" })
            @Html.ValidationMessageFor(model => model.News.IsElite) @Html.LabelFor(model => model.News.IsElite, new { @for = "chkIsElite" })
       
            @Html.CheckBoxFor(model => model.News.IsUrl, new { @id = "chkIsUrl" })
            @Html.ValidationMessageFor(model => model.News.IsUrl)@Html.LabelFor(model => model.News.IsUrl, new { @for = "chkIsUrl" })

            @Html.CheckBoxFor(model => model.News.IsShow, new { @id = "chkIsShow" })
            @Html.ValidationMessageFor(model => model.News.IsShow)@Html.LabelFor(model => model.News.IsShow, new { @for = "chkIsShow" })
      
            @Html.CheckBoxFor(model => model.News.IsImage, new { @id = "chkIsImage" })
            @Html.ValidationMessageFor(model => model.News.IsImage)@Html.LabelFor(model => model.News.IsImage, new { @for = "chkIsImage" })
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.News.LinkUrl)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.News.LinkUrl)
            @Html.ValidationMessageFor(model => model.News.LinkUrl)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.News.ImagePath)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.News.ImagePath)
            @Html.ValidationMessageFor(model => model.News.ImagePath)
        </div>
        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "NewsList2")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">

    // This is a check for the CKEditor class. If not defined, the paths must be checked.
    if (typeof CKEDITOR == 'undefined') {
        document.write(
		'<strong><span style="color: #ff0000">Error</span>: CKEditor not found</strong>.' +
		'This sample assumes that CKEditor (not included with CKFinder) is installed in' +
		'the "/ckeditor/" path. If you have it installed in a different place, just edit' +
		'this file, changing the wrong paths in the &lt;head&gt; (line 5) and the "BasePath"' +
		'value (line 32).');
    }
    else {
        var editor = CKEDITOR.replace('ckeditor1');
        //editor.setData('<p>Just click the <b>Image</b> or <b>Link</b> button, and then <b>&quot;Browse Server&quot;</b>.</p>');

        // Just call CKFinder.setupCKEditor and pass the CKEditor instance as the first argument.
        // The second parameter (optional), is the path for the CKFinder installation (default = "/ckfinder/").
        CKFinder.setupCKEditor(editor, '@Url.Content("~/Content/ckfinder")');

        // It is also possible to pass an object with selected CKFinder properties as a second argument.
        // CKFinder.setupCKEditor( editor, { basePath : '../', skin : 'v1' } ) ;
    }

</script>